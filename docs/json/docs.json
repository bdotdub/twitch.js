{"meta":{"generator":"0.9.0","format":20,"date":1619661086429},"custom":null,"classes":[{"name":"Client","description":"Creates the main class to generate clients.","extends":[[["EventEmmiter"]]],"construct":{"name":"Client","description":"[autoLogEnd Boolean, Default: true]"},"props":[{"name":"options","description":"The options the client was instantiated with","type":[[["ClientOptions"]]],"meta":{"line":27,"file":"Client.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/client"}},{"name":"token","description":"Authorization token for the logged in user/bot\r<warn>This should be kept private at all times.</warn>","access":"private","nullable":true,"type":[[["String"]]],"meta":{"line":49,"file":"Client.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/client"}},{"name":"user","description":"User that the client is logged in as","nullable":true,"type":[[["ClientUser"]]],"meta":{"line":58,"file":"Client.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/client"}},{"name":"readyAt","description":"Time at which the client was last regarded as being in the `READY` state\r(each time the client disconnects and successfully reconnects, this will be overwritten)","nullable":true,"type":[[["Date"]]],"meta":{"line":65,"file":"Client.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/client"}},{"name":"autoLogEnd","description":"The bool of the system of auto logger finish event","type":[[["Boolean"]]],"meta":{"line":71,"file":"Client.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/client"}},{"name":"channels","description":"A collection with all channels","type":[[["Collection"]]],"meta":{"line":92,"file":"Client.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/client"}},{"name":"_intervals","description":"Intervals set by {@link Client#setInterval} that are still active","access":"private","type":[[["Set","<"],["Timeout",">"]]],"meta":{"line":114,"file":"Client.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/client"}},{"name":"sleept","description":"The SLEEPT manager of the client","access":"private","type":[[["SLEEPTManager"]]],"meta":{"line":128,"file":"Client.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/client"}}],"methods":[{"name":"uptime","description":"Returns the time bot is connected with twitch in miliseconds","examples":["await Client.uptime()","Client.uptime().then((Time) => { })"],"returns":[[["Promise","<"],["Resolve",">"]]],"meta":{"line":147,"file":"Client.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/client"}},{"name":"login","description":"Logs the client in, establishing a websocket connection to Twitch.","examples":["Client.login('token')\r .then()","Client.login(false)\r .then()"],"params":[{"name":"token","description":"Token of the account to log in with (Opcional)","optional":true,"type":[[["String"]]]},{"name":"false","description":"False to Anonymous mode (Opcional)","optional":true,"type":[[["Boolean"]]]}],"returns":[[["Promise","<"],["Pending",">"]]],"meta":{"line":163,"file":"Client.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/client"}},{"name":"join","description":"Join the bot on the channel parsed","examples":["client.join('channelName')\r .then()"],"params":[{"name":"channelName","description":"The name of the channel the bot will connect","optional":true,"type":[[["String"]]]}],"returns":{"types":[[["Promise","<"],["Pending",">"]]],"description":"true if the bot connect, false if it cannot connect"},"meta":{"line":175,"file":"Client.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/client"}},{"name":"leave","description":"Leave the bot on the channel parsed","examples":["client.leave('channelName')\r .then()"],"params":[{"name":"channelName","description":"The name of the channel the bot will disconnect","optional":true,"type":[[["String"]]]}],"returns":{"types":[[["Promise","<"],["Pending",">"]]],"description":"true if the bot disconnect, false if it cannot disconnect"},"meta":{"line":187,"file":"Client.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/client"}},{"name":"ping","description":"Get the API ping","examples":["client.ping()"],"returns":{"types":[[["Promise","<"],["Number",">"]]],"description":"return the API ping in milliseconds"},"meta":{"line":197,"file":"Client.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/client"}},{"name":"eventEmmiter","description":"Emit a event from client level","examples":["client.eventEmmiter('event', Args)"],"params":[{"name":"event","description":"the name of the event than will be sended","type":[[["String"]]]},{"name":"args","description":"the args of the event","variable":true,"type":[[["Any"]]]}],"meta":{"line":208,"file":"Client.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/client"}},{"name":"sweepMessages","description":"Sweeps all text-based channels' messages and removes the ones older than the max message lifetime.\rIf the message has been edited, the time of the edit is used rather than the time of the original message.","params":[{"name":"lifetime","description":"Messages that are older than this (in seconds)\rwill be removed from the caches. The default is based on {@link ClientOptions#messageCacheLifetime}","optional":true,"default":"this.options.messageCacheLifetime","type":[[["number"]]]}],"returns":{"types":[[["number"]]],"description":"Amount of messages that were removed from the caches,\ror -1 if the message cache lifetime is unlimited"},"meta":{"line":254,"file":"Client.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/client"}},{"name":"disconnect","description":"Disconnect client from TwitchIRC","returns":{"types":[[["Promise","<"],["Pending",">"]]],"description":"returned when client disconnect."},"meta":{"line":281,"file":"Client.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/client"}},{"name":"_validateOptions","description":"Validates the client options.","access":"private","params":[{"name":"options","description":"Options to validate","optional":true,"default":"this.options","type":[[["ClientOptions"]]]}],"meta":{"line":290,"file":"Client.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/client"}}],"meta":{"line":17,"file":"Client.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/client"}},{"name":"chatters","description":"The class for the follow channel function","methods":[{"name":"getChattersInfo","description":"Get chatter info","meta":{"line":21,"file":"chatters.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/sleept/api/functions"}},{"name":"followChannel","description":"Follow channel","meta":{"line":19,"file":"follow.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/sleept/api/functions"}}],"meta":{"line":10,"file":"follow.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/sleept/api/functions"}},{"name":"validator","description":"The class for the validator function","methods":[{"name":"validate","description":"validate","meta":{"line":23,"file":"validator.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/sleept/api/functions"}}],"meta":{"line":13,"file":"validator.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/sleept/api/functions"}},{"name":"twitchRequest","description":"Api for making http requests to twitch","methods":[{"name":"request","description":"Do a http request to twitch web api","params":[{"name":"path","type":[[["String"]]]},{"name":"options","type":[[["Object"]]]}],"meta":{"line":26,"file":"twitchWebAPI.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/sleept/api"}}],"meta":{"line":14,"file":"twitchWebAPI.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/sleept/api"}},{"name":"SLEEPTMananger","description":"The manager for all things than envolve Sleept","meta":{"line":9,"file":"SLEEPTMananger.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/sleept"}},{"name":"SLEEPTMethods","description":"The main file. Connect with twitch websocket and provide access to irc.","access":"private","methods":[{"name":"isConnected","returns":{"types":[[["Boolean"]]],"description":"if websocket is connected"},"meta":{"line":43,"file":"SLEEPTMethods.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/sleept"}},{"name":"login","description":"Connects with websocket and auth with IRC","params":[{"name":"token","description":"the bot token","optional":true,"type":[[["String"]]]},{"name":"false","description":"Connect with IRC in anonymous mode","optional":true,"type":[[["Boolean"]]]}],"returns":{"types":[[["Promise","<"],["Pending",">"]]],"description":"when connected with IRC"},"meta":{"line":53,"file":"SLEEPTMethods.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/sleept"}},{"name":"onMessage","description":"Called every time a websocket message is received by IRC","params":[{"name":"event","description":"the raw message event to be parsed","optional":true,"type":[[["String"]]]}],"meta":{"line":100,"file":"SLEEPTMethods.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/sleept"}},{"name":"onError","description":"Called when websocket went a error","params":[{"name":"event","description":"the raw error object to be parsed","optional":true,"type":[[["String"]]]}],"meta":{"line":114,"file":"SLEEPTMethods.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/sleept"}},{"name":"onClose","description":"Called when websocket connection close","meta":{"line":123,"file":"SLEEPTMethods.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/sleept"}},{"name":"onOpen","description":"Called when websocket connection opens","meta":{"line":136,"file":"SLEEPTMethods.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/sleept"}},{"name":"handlerMessage","description":"Called when websocket connection close","params":[{"name":"messageObject","description":"the object parsed by parser on onMessage","optional":true,"type":[[["Object"]]]}],"meta":{"line":160,"file":"SLEEPTMethods.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/sleept"}},{"name":"onConnected","description":"Called after websocket successfully connect with IRC and be on ready state","meta":{"line":293,"file":"SLEEPTMethods.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/sleept"}},{"name":"join","description":"Connects with a twitch channel chat","params":[{"name":"channel","description":"the channel name who will be connected","optional":true,"type":[[["String"]]]},{"name":"index","description":"the index of channels list of element","optional":true,"type":[[["Number"]]]}],"returns":{"types":[[["Promise","<"],["Pending",">"]]],"description":"Resolved when sucessfull connect with channel"},"meta":{"line":311,"file":"SLEEPTMethods.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/sleept"}},{"name":"leave","description":"Leave from a twitch channel chat","params":[{"name":"channel","description":"the channel name who will be leaved","optional":true,"type":[[["String"]]]}],"returns":{"types":[[["Promise","<"],["Pending",">"]]],"description":"Resolved when sucessfull leave of the channel"},"meta":{"line":356,"file":"SLEEPTMethods.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/sleept"}},{"name":"ping","description":"Send a ping message to websocket","returns":{"types":[[["Promise","<"],["Number",">"]]],"description":"The ping in milliseconds with IRC"},"meta":{"line":400,"file":"SLEEPTMethods.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/sleept"}},{"name":"sendMessage","description":"Send a message to channel","params":[{"name":"channel","description":"The channel name where the message will be delivered","optional":true,"type":[[["String"]]]},{"name":"message","description":"The message content who will be sended","optional":true,"type":[[["String"]]]},{"name":"replacer","description":"The replacements for %s on message content","optional":true,"variable":true,"type":[[["Array"]]]}],"returns":{"types":[[["Promise","<"],["Pending",">"]]],"description":"returns when the message is sended"},"meta":{"line":426,"file":"SLEEPTMethods.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/sleept"}},{"name":"generateUser","description":"Generate users collections and added it to channel user collection","params":[{"name":"channelName","description":"The name of the channel to search for users","optional":true,"type":[[["String"]]]}],"meta":{"line":457,"file":"SLEEPTMethods.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/sleept"}},{"name":"updateUser","description":"Updates a user collection with the new data","params":[{"name":"data","description":"The messageObject returned from twitch with a user data","optional":true,"type":[[["Object"]]]}],"async":true,"meta":{"line":477,"file":"SLEEPTMethods.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/sleept"}},{"name":"disconnect","description":"Disconnect from IRC","returns":{"types":[[["Promise","<"],["Pending",">"]]],"description":"returns when IRC sucessfull disconnect"},"meta":{"line":504,"file":"SLEEPTMethods.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/sleept"}},{"name":"replyMessage","description":"Reply a message sended on channel","params":[{"name":"msgId","description":"The id of the message who will be responded","optional":true,"type":[[["String"]]]},{"name":"channel","description":"The channel name where the message will be delivered","optional":true,"type":[[["String"]]]},{"name":"message","description":"The message content who will be sended","optional":true,"type":[[["String"]]]},{"name":"replacer","description":"The replacements for %s on message content","optional":true,"type":[[["Array"]]]}],"returns":{"types":[[["Promise","<"],["Pending",">"]]],"description":"returns when the message is sended"},"meta":{"line":533,"file":"SLEEPTMethods.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/sleept"}},{"name":"sendRawMessage","params":[{"name":"rawMessage","description":"a string with a websocket message to be sended to twitchIRC","type":[[["String"]]]}],"returns":{"types":[[["Promise","<"],["any",">"]]],"description":"the websocket return of the message"},"meta":{"line":567,"file":"SLEEPTMethods.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/sleept"}}],"meta":{"line":24,"file":"SLEEPTMethods.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/sleept"}},{"name":"channels","description":"Channel collection template for creating all channels collections","methods":[{"name":"isConnected","description":"Return if the bot is connected with channel","examples":["Client.channels.get('channelName').isConnected()"],"returns":{"types":[[["Boolean"]]],"description":"true if connected, false if don't"},"meta":{"line":39,"file":"channels.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/structures"}},{"name":"send","description":"Send message into the channel","examples":["Client.channels.get('channelName').send('message', ['replacer', 'replacer2', ...])"],"params":[{"name":"message","description":"The message that will be sended","optional":true,"type":[[["String"]]]},{"name":"replacer","description":"If the message contains %s, the array that will replace the %s in order","optional":true,"type":[[["Array","<"],["optional",">"]]]}],"returns":[[["Promise","<"],["Pending",">"]]],"meta":{"line":51,"file":"channels.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/structures"}}],"meta":{"line":10,"file":"channels.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/structures"}},{"name":"Users","description":"User collection template for creating all Users collections","props":[{"name":"client","description":"The client that created the instance of the channel","readonly":true,"type":[[["Client"]]],"meta":{"line":9,"file":"users.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/structures"}}],"meta":{"line":7,"file":"users.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/structures"}},{"name":"Collection","description":"A Map with additional utility methods. This is used throughout twitch.js rather than Arrays for anything that has\ran ID, for significantly improved performance and ease-of-use.","extends":[[["Map"]]],"props":[{"name":"_array","description":"Cached array for the `array()` method - will be reset to `null` whenever `set()` or `delete()` are called","access":"private","nullable":true,"type":[[["Array"]]],"meta":{"line":13,"file":"collection.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/utils"}},{"name":"_keyArray","description":"Cached array for the `keyArray()` method - will be reset to `null` whenever `set()` or `delete()` are called","access":"private","nullable":true,"type":[[["Array"]]],"meta":{"line":21,"file":"collection.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/utils"}}],"methods":[{"name":"array","description":"Creates an ordered array of the values of this collection, and caches it internally. The array will only be\rreconstructed if an item is added to or removed from the collection, or if you change the length of the array\ritself. If you don't want this caching behavior, use `[...collection.values()]` or\r`Array.from(collection.values())` instead.","returns":[[["Array"]]],"meta":{"line":49,"file":"collection.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/utils"}},{"name":"keyArray","description":"Creates an ordered array of the keys of this collection, and caches it internally. The array will only be\rreconstructed if an item is added to or removed from the collection, or if you change the length of the array\ritself. If you don't want this caching behavior, use `[...collection.keys()]` or\r`Array.from(collection.keys())` instead.","returns":[[["Array"]]],"meta":{"line":61,"file":"collection.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/utils"}},{"name":"first","description":"Obtains the first value(s) in this collection.","params":[{"name":"count","description":"Number of values to obtain from the beginning","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"The single value if `count` is undefined, or an array of values of `count` length"},"meta":{"line":71,"file":"collection.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/utils"}},{"name":"firstKey","description":"Obtains the first key(s) in this collection.","params":[{"name":"count","description":"Number of keys to obtain from the beginning","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"The single key if `count` is undefined, or an array of keys of `count` length"},"meta":{"line":87,"file":"collection.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/utils"}},{"name":"last","description":"Obtains the last value(s) in this collection. This relies on {@link Collection#array}, and thus the caching\rmechanism applies here as well.","params":[{"name":"count","description":"Number of values to obtain from the end","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"The single value if `count` is undefined, or an array of values of `count` length"},"meta":{"line":104,"file":"collection.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/utils"}},{"name":"lastKey","description":"Obtains the last key(s) in this collection. This relies on {@link Collection#keyArray}, and thus the caching\rmechanism applies here as well.","params":[{"name":"count","description":"Number of keys to obtain from the end","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"The single key if `count` is undefined, or an array of keys of `count` length"},"meta":{"line":118,"file":"collection.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/utils"}},{"name":"random","description":"Obtains random value(s) from this collection. This relies on {@link Collection#array}, and thus the caching\rmechanism applies here as well.","params":[{"name":"count","description":"Number of values to obtain randomly","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"The single value if `count` is undefined, or an array of values of `count` length"},"meta":{"line":132,"file":"collection.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/utils"}},{"name":"randomKey","description":"Obtains random key(s) from this collection. This relies on {@link Collection#keyArray}, and thus the caching\rmechanism applies here as well.","params":[{"name":"count","description":"Number of keys to obtain randomly","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"The single key if `count` is undefined, or an array of keys of `count` length"},"meta":{"line":150,"file":"collection.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/utils"}},{"name":"find","description":"Searches for a single item where its specified property's value is identical to the given value\r(`item[prop] === value`), or the given function returns a truthy value. In the latter case, this is identical to\r[Array.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).\r<warn>All collections used in twitch.js are mapped using their `id` property, and if you want to find by id you\rshould use the `get` method. See\r[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get) for details.</warn>","examples":["collection.find('username', 'Bob');","collection.find(val => val.username === 'Bob');"],"params":[{"name":"propOrFn","description":"The property to test against, or the function to test with","type":[[["string"]],[["function"]]]},{"name":"value","description":"The expected value - only applicable and required if using a property for the first argument","optional":true,"type":[["*"]]}],"returns":[["*"]],"meta":{"line":177,"file":"collection.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/utils"}},{"name":"findKey","description":"Searches for the key of a single item where its specified property's value is identical to the given value\r(`item[prop] === value`), or the given function returns a truthy value. In the latter case, this is identical to\r[Array.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).","examples":["collection.findKey('username', 'Bob');","collection.findKey(val => val.username === 'Bob');"],"params":[{"name":"propOrFn","description":"The property to test against, or the function to test with","type":[[["string"]],[["function"]]]},{"name":"value","description":"The expected value - only applicable and required if using a property for the first argument","optional":true,"type":[["*"]]}],"returns":[["*"]],"meta":{"line":207,"file":"collection.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/utils"}},{"name":"sweep","description":"Removes entries that satisfy the provided filter function.","params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[[["Object"]]]}],"returns":{"types":[[["number"]]],"description":"The number of removed entries"},"meta":{"line":231,"file":"collection.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/utils"}},{"name":"filter","description":"Identical to\r[Array.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\rbut returns a Collection instead of an Array.","params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[[["Object"]]]}],"returns":[[["Collection"]]],"meta":{"line":248,"file":"collection.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/utils"}},{"name":"partition","description":"Partitions the collection into two collections where the first collection\rcontains the items that passed and the second contains the items that failed.","examples":["const [big, small] = collection.partition(guild => guild.memberCount > 250);"],"params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[["*"]]}],"returns":[[["Array","<"],["Collection",">"]]],"meta":{"line":265,"file":"collection.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/utils"}},{"name":"map","description":"Identical to\r[Array.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).","params":[{"name":"fn","description":"Function that produces an element of the new array, taking three arguments","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[["*"]]}],"returns":[[["Array"]]],"meta":{"line":285,"file":"collection.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/utils"}},{"name":"some","description":"Identical to\r[Array.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).","params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[[["Object"]]]}],"returns":[[["boolean"]]],"meta":{"line":300,"file":"collection.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/utils"}},{"name":"every","description":"Identical to\r[Array.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).","params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[[["Object"]]]}],"returns":[[["boolean"]]],"meta":{"line":315,"file":"collection.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/utils"}},{"name":"reduce","description":"Identical to\r[Array.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).","params":[{"name":"fn","description":"Function used to reduce, taking four arguments; `accumulator`, `currentValue`, `currentKey`,\rand `collection`","type":[[["function"]]]},{"name":"initialValue","description":"Starting value for the accumulator","optional":true,"type":[["*"]]}],"returns":[["*"]],"meta":{"line":331,"file":"collection.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/utils"}},{"name":"tap","description":"Identical to\r[Map.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach),\rbut returns the collection instead of undefined.","examples":["collection\r .tap(user => console.log(user.username))\r .filter(user => user.bot)\r .tap(user => console.log(user.username));"],"params":[{"name":"fn","description":"Function to execute for each element","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[["*"]]}],"returns":[[["Collection"]]],"meta":{"line":363,"file":"collection.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/utils"}},{"name":"clone","description":"Creates an identical shallow copy of this collection.","examples":["const newColl = someColl.clone();"],"returns":[[["Collection"]]],"meta":{"line":373,"file":"collection.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/utils"}},{"name":"concat","description":"Combines this collection with others into a new collection. None of the source collections are modified.","examples":["const newColl = someColl.concat(someOtherColl, anotherColl, ohBoyAColl);"],"params":[{"name":"collections","description":"Collections to merge","variable":true,"type":[[["Collection"]]]}],"returns":[[["Collection"]]],"meta":{"line":383,"file":"collection.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/utils"}},{"name":"deleteAll","description":"Calls the `delete()` method on all items that have it.","returns":[[["Array","<"],["Promise",">"]]],"meta":{"line":395,"file":"collection.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/utils"}},{"name":"equals","description":"Checks if this collection shares identical key-value pairings with another.\rThis is different to checking for equality using equal-signs, because\rthe collections may be different objects, but contain the same data.","params":[{"name":"collection","description":"Collection to compare with","type":[[["Collection"]]]}],"returns":{"types":[[["boolean"]]],"description":"Whether the collections have identical contents"},"meta":{"line":410,"file":"collection.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/utils"}},{"name":"sort","description":"The sort() method sorts the elements of a collection in place and returns the collection.\rThe sort is not necessarily stable. The default sort order is according to string Unicode code points.","params":[{"name":"compareFunction","description":"Specifies a function that defines the sort order.\rif omitted, the collection is sorted according to each character's Unicode code point value,\raccording to the string conversion of each element.","optional":true,"type":[[["function"]]]}],"returns":[[["Collection"]]],"meta":{"line":428,"file":"collection.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/utils"}}],"meta":{"line":9,"file":"collection.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/utils"}}],"interfaces":[],"typedefs":[{"name":"ClientOptions","description":"Options for a client.","type":[[["Object"]]],"props":[{"name":"messageCacheMaxSize","description":"Maximum number of messages to cache per channel\r(-1 or Infinity for unlimited - don't do this without message sweeping, otherwise memory usage will climb\rindefinitely) [Not implemented, don't change it]","optional":true,"default":200,"type":[[["Number"]]]},{"name":"messageCacheLifetime","description":"How long a message should stay in the cache until it is considered\rsweepable (in seconds, 0 for forever) [Not implemented, don't change it]","optional":true,"default":0,"type":[[["Number"]]]},{"name":"messageSweepInterval","description":"How frequently to remove messages from the cache that are older than\rthe message cache lifetime (in seconds, 0 for never) [Not implemented, don't change it]","optional":true,"default":0,"type":[[["Number"]]]},{"name":"fetchAllChatters","description":"Whether to cache all channel chatters and users upon startup, as well as\rupon joining a channel (should be avoided whenever possible) [Not implemented, don't change it]","optional":true,"default":true,"type":[[["Boolean"]]]},{"name":"sync","description":"Whether to periodically sync channels (for user accounts) [Not implemented, don't change it]","optional":true,"default":false,"type":[[["Boolean"]]]},{"name":"retryLimit","description":"How many times twitch.js will try to connect with twitchIRC [Not implemented, don't change it]","optional":true,"default":"infinity","type":[[["Number"]]]},{"name":"disabledEvents","description":"An array of disabled websocket events. Events in this array will not be\rprocessed, potentially resulting in performance improvements for larger bots. Only disable events you are\r100% certain you don't need, as many are important, but not obviously so. [Not implemented, don't change it]","optional":true,"default":"[]","type":[[["Array","<"],["WSEventType",">"]]]},{"name":"autoLogEnd","description":"autoLogEnd option","optional":true,"default":true,"type":[[["Boolean"]]]},{"name":"channels","description":"Channels bot will listen","optional":true,"default":"[]","type":[[["Array","<"],["String",">"]]]},{"name":"connectedChannels","description":"Array of channels where bot is connected","optional":true,"default":"[]","type":[[["Array","<"],["String",">"]]]},{"name":"debug","description":"Starts the bot in debug mode if activated","optional":true,"default":false,"type":[[["Boolean"]]]},{"name":"ws","description":"Options for the WebSocket","optional":true,"type":[[["WebsocketOptions"]]]},{"name":"http","description":"HTTP options","optional":true,"type":[[["HTTPOptions"]]]}],"meta":{"line":7,"file":"Constants.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/utils"}},{"name":"WebsocketOptions","description":"WebSocket options (these are left as snake_case to match the API)","type":[[["Object"]]],"props":[{"name":"host","description":"The default host to use into WebSocket.","optional":true,"default":"'irc-ws.chat.twitch.tv'","type":[[["String"]]]},{"name":"port","description":"The default port to use into WebSocket.","optional":true,"default":443,"type":[[["Number"]]]},{"name":"type","description":"The default type of WebSocket (Must be 'ws' or 'wss').","optional":true,"default":"'wss'","type":[[["String"]]]},{"name":"large_threshold","description":"Number of chatters in a channel to be considered large [Not implemented, don't change it]","optional":true,"default":250,"type":[[["Number"]]]}],"meta":{"line":44,"file":"Constants.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/utils"}},{"name":"HTTPOptions","description":"HTTP options","type":[[["Object"]]],"props":[{"name":"version","description":"Default API version to use [Not implemented, don't change it]","optional":true,"default":7,"type":[[["Number"]]]},{"name":"host","description":"Base url of the IRC","optional":true,"default":"'tmi.twitch.tv'","type":[[["String"]]]},{"name":"hostID","description":"Base url of the ID IRC","optional":true,"default":"'id.twitch.tv'","type":[[["String"]]]},{"name":"headers","description":"Default http request options","optional":true,"type":[[["Object"]]]}],"meta":{"line":59,"file":"Constants.js","path":"../../Documents/dados/twitchapis/TwitchJS/src/utils"}}],"externals":[]}
