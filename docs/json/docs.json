{"meta":{"generator":"0.9.0","format":20,"date":1610925587338},"custom":null,"classes":[{"name":"Client","description":"Creates the main class to generate clients.","extends":[[["EventEmmiter"]]],"construct":{"name":"Client","description":"[autoLogEnd Boolean, Default: true]"},"props":[{"name":"options","description":"The options the client was instantiated with","type":[[["ClientOptions"]]],"meta":{"line":27,"file":"Client.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/client"}},{"name":"sleept","description":"The SLEEPT manager of the client","access":"private","type":[[["SLEEPTManager"]]],"meta":{"line":57,"file":"Client.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/client"}},{"name":"token","description":"Authorization token for the logged in user/bot\r<warn>This should be kept private at all times.</warn>","nullable":true,"type":[[["String"]]],"meta":{"line":66,"file":"Client.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/client"}},{"name":"user","description":"User that the client is logged in as","nullable":true,"type":[[["ClientUser"]]],"meta":{"line":75,"file":"Client.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/client"}},{"name":"readyAt","description":"Time at which the client was last regarded as being in the `READY` state\r(each time the client disconnects and successfully reconnects, this will be overwritten)","nullable":true,"type":[[["Date"]]],"meta":{"line":82,"file":"Client.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/client"}},{"name":"autoLogEnd","description":"The bool of the system of auto logger finish event","type":[[["Boolean"]]],"meta":{"line":88,"file":"Client.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/client"}},{"name":"channels","description":"Creates a collecion to each channel","type":[[["Collection"]]],"meta":{"line":105,"file":"Client.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/client"}},{"name":"_intervals","description":"Intervals set by {@link Client#setInterval} that are still active","access":"private","type":[[["Set","<"],["Timeout",">"]]],"meta":{"line":126,"file":"Client.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/client"}}],"methods":[{"name":"uptime","description":"Returns the time bot is connected with twitch in miliseconds","examples":["await Client.uptime()","Client.uptime().then((Time) => { })"],"returns":[[["Promise","<"],["Resolve",">"]]],"meta":{"line":140,"file":"Client.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/client"}},{"name":"login","description":"Logs the client in, establishing a websocket connection to Twitch.","examples":["Client.login('token')\r .then()"],"params":[{"name":"token","description":"Token of the account to log in with","optional":true,"type":[[["String"]]]}],"returns":[[["Promise","<"],["Pending",">"]]],"meta":{"line":152,"file":"Client.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/client"}},{"name":"join","description":"Join the bot on the channel parsed","examples":["client.join('channelName')\r .then()"],"params":[{"name":"channelName","description":"The name of the channel the bot will connect","optional":true,"type":[[["String"]]]}],"returns":{"types":[[["Promise","<"],["Pending",">"]]],"description":"true if the bot connect, false if it cannot connect"},"meta":{"line":164,"file":"Client.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/client"}},{"name":"leave","description":"Leave the bot on the channel parsed","examples":["client.leave('channelName')\r .then()"],"params":[{"name":"channelName","description":"The name of the channel the bot will disconnect","optional":true,"type":[[["String"]]]}],"returns":{"types":[[["Promise","<"],["Pending",">"]]],"description":"true if the bot disconnect, false if it cannot disconnect"},"meta":{"line":176,"file":"Client.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/client"}},{"name":"ping","description":"Get the API ping","examples":["client.ping()"],"returns":{"types":[[["Promise","<"],["Number",">"]]],"description":"return the API ping in milliseconds"},"meta":{"line":186,"file":"Client.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/client"}},{"name":"eventEmmiter","description":"Emit a event from client level","examples":["client.eventEmmiter('event', Args)"],"params":[{"name":"event","description":"the name of the event than will be sended","type":[[["String"]]]},{"name":"args","description":"the args of the event","variable":true,"type":[[["Any"]]]}],"meta":{"line":197,"file":"Client.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/client"}},{"name":"sweepMessages","description":"Sweeps all text-based channels' messages and removes the ones older than the max message lifetime.\rIf the message has been edited, the time of the edit is used rather than the time of the original message.","params":[{"name":"lifetime","description":"Messages that are older than this (in seconds)\rwill be removed from the caches. The default is based on {@link ClientOptions#messageCacheLifetime}","optional":true,"default":"this.options.messageCacheLifetime","type":[[["number"]]]}],"returns":{"types":[[["number"]]],"description":"Amount of messages that were removed from the caches,\ror -1 if the message cache lifetime is unlimited"},"meta":{"line":242,"file":"Client.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/client"}},{"name":"disconnect","description":"Disconnect client from TwitchIRC","returns":{"types":[[["Promise","<"],["Pending",">"]]],"description":"returned when client disconnect."},"meta":{"line":269,"file":"Client.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/client"}},{"name":"_validateOptions","description":"Validates the client options.","access":"private","params":[{"name":"options","description":"Options to validate","optional":true,"default":"this.options","type":[[["ClientOptions"]]]}],"meta":{"line":278,"file":"Client.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/client"}}],"events":[{"name":"rateLimit","description":"Emitted when the client hits a rate limit while making a request","params":[{"name":"rateLimitInfo","description":"Object containing the rate limit info","type":[[["Object"]]]},{"name":"rateLimitInfo.limit","description":"Number of requests that can be made to this endpoint","type":[[["number"]]]},{"name":"rateLimitInfo.timeDifference","description":"Delta-T in ms between your system and Discord servers","type":[[["number"]]]},{"name":"rateLimitInfo.path","description":"Path used for request that triggered this event","type":[[["string"]]]},{"name":"rateLimitInfo.method","description":"HTTP method used for request that triggered this event","type":[[["string"]]]}],"meta":{"line":98,"file":"Sequential.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/sleept/RequestHandlers"}}],"meta":{"line":17,"file":"Client.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/client"}},{"name":"RequestHandler","description":"A base class for different types of rate limiting handlers for the REST API.","access":"private","construct":{"name":"RequestHandler","params":[{"name":"sleeptMananger","description":"The SleepT to use","type":[[["SLEEPTMananger"]]]}]},"props":[{"name":"restManager","description":"The RESTManager that instantiated this RequestHandler","type":[[["SLEEPTManager"]]],"meta":{"line":15,"file":"RequestHandler.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/sleept/RequestHandlers"}},{"name":"queue","description":"A list of requests that have yet to be processed","type":[[["Array","<"],["APIRequest",">"]]],"meta":{"line":21,"file":"RequestHandler.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/sleept/RequestHandlers"}},{"name":"globalLimit","description":"Whether or not the client is being rate limited on every endpoint","readonly":true,"type":[[["boolean"]]],"meta":{"line":28,"file":"RequestHandler.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/sleept/RequestHandlers"}}],"methods":[{"name":"push","description":"Push a new API request into this bucket.","params":[{"name":"request","description":"The new request to push into the queue","type":[[["APIRequest"]]]}],"meta":{"line":40,"file":"RequestHandler.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/sleept/RequestHandlers"}},{"name":"handle","description":"Attempts to get this RequestHandler to process its current queue.","meta":{"line":47,"file":"RequestHandler.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/sleept/RequestHandlers"}}],"meta":{"line":6,"file":"RequestHandler.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/sleept/RequestHandlers"}},{"name":"SequentialRequestHandler","description":"Handles API Requests sequentially, i.e. we wait until the current request is finished before moving onto\rthe next. This plays a _lot_ nicer in terms of avoiding 429's when there is more than one session of the account,\rbut it can be slower.","extends":[[["RequestHandler"]]],"access":"private","construct":{"name":"SequentialRequestHandler","params":[{"name":"sleeptManager","description":"The SLEEPT manager to use","type":[[["SLEEPTManager"]]]},{"name":"endpoint","description":"The endpoint to handle","type":[[["string"]]]}]},"props":[{"name":"client","description":"The client that instantiated this handler","type":[[["Client"]]],"meta":{"line":29,"file":"Sequential.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/sleept/RequestHandlers"}},{"name":"endpoint","description":"The endpoint that this handler is handling","type":[[["string"]]],"meta":{"line":35,"file":"Sequential.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/sleept/RequestHandlers"}},{"name":"timeDifference","description":"The time difference between Discord's Dates and the local computer's Dates. A positive number means the local\rcomputer's time is ahead of Discord's","type":[[["number"]]],"meta":{"line":42,"file":"Sequential.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/sleept/RequestHandlers"}},{"name":"busy","description":"Whether the queue is being processed or not","type":[[["boolean"]]],"meta":{"line":48,"file":"Sequential.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/sleept/RequestHandlers"}},{"name":"restManager","description":"The RESTManager that instantiated this RequestHandler","type":[[["SLEEPTManager"]]],"meta":{"line":15,"file":"RequestHandler.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/sleept/RequestHandlers"}},{"name":"queue","description":"A list of requests that have yet to be processed","type":[[["Array","<"],["APIRequest",">"]]],"meta":{"line":21,"file":"RequestHandler.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/sleept/RequestHandlers"}},{"name":"globalLimit","description":"Whether or not the client is being rate limited on every endpoint","readonly":true,"type":[[["boolean"]]],"meta":{"line":28,"file":"RequestHandler.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/sleept/RequestHandlers"}}],"methods":[{"name":"execute","description":"Performs a request then resolves a promise to indicate its readiness for a new request.","params":[{"name":"item","description":"The item to execute","type":[[["APIRequest"]]]}],"returns":[[["Promise","<(?"],["Object","|"],["Error",")>"]]],"meta":{"line":61,"file":"Sequential.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/sleept/RequestHandlers"}},{"name":"push","description":"Push a new API request into this bucket.","inherits":"RequestHandler#push","inherited":true,"params":[{"name":"request","description":"The new request to push into the queue","type":[[["APIRequest"]]]}],"meta":{"line":40,"file":"RequestHandler.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/sleept/RequestHandlers"}},{"name":"handle","description":"Attempts to get this RequestHandler to process its current queue.","inherits":"RequestHandler#handle","inherited":true,"meta":{"line":47,"file":"RequestHandler.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/sleept/RequestHandlers"}}],"meta":{"line":17,"file":"Sequential.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/sleept/RequestHandlers"}},{"name":"SLEEPTMethods","description":"The main file. Connect with twitch websocket and provide access to irc.","meta":{"line":12,"file":"SLEEPTMethods.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/sleept"}},{"name":"TwitchAPIError","description":"Represents an error from the Twitch API.","extends":[[["Error"]]],"props":[{"name":"path","description":"The path of the request relative to the HTTP endpoint","type":[[["string"]]],"meta":{"line":16,"file":"TwitchAPIError.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/sleept"}},{"name":"code","description":"HTTP error code returned by Discord","type":[[["number"]]],"meta":{"line":22,"file":"TwitchAPIError.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/sleept"}},{"name":"method","description":"The HTTP method used for the request","type":[[["string"]]],"meta":{"line":28,"file":"TwitchAPIError.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/sleept"}}],"methods":[{"name":"flattenErrors","description":"Flattens an errors object returned from the API into an array.","scope":"static","access":"private","params":[{"name":"obj","description":"Discord errors object","type":[[["Object"]]]},{"name":"key","description":"Used internally to determine key names of nested fields","optional":true,"type":[[["string"]]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":38,"file":"TwitchAPIError.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/sleept"}}],"meta":{"line":5,"file":"TwitchAPIError.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/sleept"}},{"name":"Collection","description":"A Map with additional utility methods. This is used throughout twitch.js rather than Arrays for anything that has\ran ID, for significantly improved performance and ease-of-use.","extends":[[["Map"]]],"props":[{"name":"_array","description":"Cached array for the `array()` method - will be reset to `null` whenever `set()` or `delete()` are called","access":"private","nullable":true,"type":[[["Array"]]],"meta":{"line":10,"file":"collection.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/utils"}},{"name":"_keyArray","description":"Cached array for the `keyArray()` method - will be reset to `null` whenever `set()` or `delete()` are called","access":"private","nullable":true,"type":[[["Array"]]],"meta":{"line":18,"file":"collection.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/utils"}}],"methods":[{"name":"array","description":"Creates an ordered array of the values of this collection, and caches it internally. The array will only be\rreconstructed if an item is added to or removed from the collection, or if you change the length of the array\ritself. If you don't want this caching behavior, use `[...collection.values()]` or\r`Array.from(collection.values())` instead.","returns":[[["Array"]]],"meta":{"line":46,"file":"collection.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/utils"}},{"name":"keyArray","description":"Creates an ordered array of the keys of this collection, and caches it internally. The array will only be\rreconstructed if an item is added to or removed from the collection, or if you change the length of the array\ritself. If you don't want this caching behavior, use `[...collection.keys()]` or\r`Array.from(collection.keys())` instead.","returns":[[["Array"]]],"meta":{"line":58,"file":"collection.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/utils"}},{"name":"first","description":"Obtains the first value(s) in this collection.","params":[{"name":"count","description":"Number of values to obtain from the beginning","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"The single value if `count` is undefined, or an array of values of `count` length"},"meta":{"line":68,"file":"collection.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/utils"}},{"name":"firstKey","description":"Obtains the first key(s) in this collection.","params":[{"name":"count","description":"Number of keys to obtain from the beginning","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"The single key if `count` is undefined, or an array of keys of `count` length"},"meta":{"line":84,"file":"collection.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/utils"}},{"name":"last","description":"Obtains the last value(s) in this collection. This relies on {@link Collection#array}, and thus the caching\rmechanism applies here as well.","params":[{"name":"count","description":"Number of values to obtain from the end","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"The single value if `count` is undefined, or an array of values of `count` length"},"meta":{"line":101,"file":"collection.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/utils"}},{"name":"lastKey","description":"Obtains the last key(s) in this collection. This relies on {@link Collection#keyArray}, and thus the caching\rmechanism applies here as well.","params":[{"name":"count","description":"Number of keys to obtain from the end","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"The single key if `count` is undefined, or an array of keys of `count` length"},"meta":{"line":115,"file":"collection.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/utils"}},{"name":"random","description":"Obtains random value(s) from this collection. This relies on {@link Collection#array}, and thus the caching\rmechanism applies here as well.","params":[{"name":"count","description":"Number of values to obtain randomly","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"The single value if `count` is undefined, or an array of values of `count` length"},"meta":{"line":129,"file":"collection.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/utils"}},{"name":"randomKey","description":"Obtains random key(s) from this collection. This relies on {@link Collection#keyArray}, and thus the caching\rmechanism applies here as well.","params":[{"name":"count","description":"Number of keys to obtain randomly","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"The single key if `count` is undefined, or an array of keys of `count` length"},"meta":{"line":147,"file":"collection.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/utils"}},{"name":"find","description":"Searches for a single item where its specified property's value is identical to the given value\r(`item[prop] === value`), or the given function returns a truthy value. In the latter case, this is identical to\r[Array.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).\r<warn>All collections used in twitch.js are mapped using their `id` property, and if you want to find by id you\rshould use the `get` method. See\r[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get) for details.</warn>","examples":["collection.find('username', 'Bob');","collection.find(val => val.username === 'Bob');"],"params":[{"name":"propOrFn","description":"The property to test against, or the function to test with","type":[[["string"]],[["function"]]]},{"name":"value","description":"The expected value - only applicable and required if using a property for the first argument","optional":true,"type":[["*"]]}],"returns":[["*"]],"meta":{"line":174,"file":"collection.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/utils"}},{"name":"findKey","description":"Searches for the key of a single item where its specified property's value is identical to the given value\r(`item[prop] === value`), or the given function returns a truthy value. In the latter case, this is identical to\r[Array.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).","examples":["collection.findKey('username', 'Bob');","collection.findKey(val => val.username === 'Bob');"],"params":[{"name":"propOrFn","description":"The property to test against, or the function to test with","type":[[["string"]],[["function"]]]},{"name":"value","description":"The expected value - only applicable and required if using a property for the first argument","optional":true,"type":[["*"]]}],"returns":[["*"]],"meta":{"line":204,"file":"collection.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/utils"}},{"name":"sweep","description":"Removes entries that satisfy the provided filter function.","params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[[["Object"]]]}],"returns":{"types":[[["number"]]],"description":"The number of removed entries"},"meta":{"line":228,"file":"collection.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/utils"}},{"name":"filter","description":"Identical to\r[Array.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\rbut returns a Collection instead of an Array.","params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[[["Object"]]]}],"returns":[[["Collection"]]],"meta":{"line":245,"file":"collection.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/utils"}},{"name":"partition","description":"Partitions the collection into two collections where the first collection\rcontains the items that passed and the second contains the items that failed.","examples":["const [big, small] = collection.partition(guild => guild.memberCount > 250);"],"params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[["*"]]}],"returns":[[["Array","<"],["Collection",">"]]],"meta":{"line":262,"file":"collection.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/utils"}},{"name":"map","description":"Identical to\r[Array.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).","params":[{"name":"fn","description":"Function that produces an element of the new array, taking three arguments","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[["*"]]}],"returns":[[["Array"]]],"meta":{"line":282,"file":"collection.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/utils"}},{"name":"some","description":"Identical to\r[Array.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).","params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[[["Object"]]]}],"returns":[[["boolean"]]],"meta":{"line":297,"file":"collection.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/utils"}},{"name":"every","description":"Identical to\r[Array.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).","params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[[["Object"]]]}],"returns":[[["boolean"]]],"meta":{"line":312,"file":"collection.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/utils"}},{"name":"reduce","description":"Identical to\r[Array.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).","params":[{"name":"fn","description":"Function used to reduce, taking four arguments; `accumulator`, `currentValue`, `currentKey`,\rand `collection`","type":[[["function"]]]},{"name":"initialValue","description":"Starting value for the accumulator","optional":true,"type":[["*"]]}],"returns":[["*"]],"meta":{"line":328,"file":"collection.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/utils"}},{"name":"tap","description":"Identical to\r[Map.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach),\rbut returns the collection instead of undefined.","examples":["collection\r .tap(user => console.log(user.username))\r .filter(user => user.bot)\r .tap(user => console.log(user.username));"],"params":[{"name":"fn","description":"Function to execute for each element","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[["*"]]}],"returns":[[["Collection"]]],"meta":{"line":360,"file":"collection.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/utils"}},{"name":"clone","description":"Creates an identical shallow copy of this collection.","examples":["const newColl = someColl.clone();"],"returns":[[["Collection"]]],"meta":{"line":370,"file":"collection.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/utils"}},{"name":"concat","description":"Combines this collection with others into a new collection. None of the source collections are modified.","examples":["const newColl = someColl.concat(someOtherColl, anotherColl, ohBoyAColl);"],"params":[{"name":"collections","description":"Collections to merge","variable":true,"type":[[["Collection"]]]}],"returns":[[["Collection"]]],"meta":{"line":380,"file":"collection.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/utils"}},{"name":"deleteAll","description":"Calls the `delete()` method on all items that have it.","returns":[[["Array","<"],["Promise",">"]]],"meta":{"line":392,"file":"collection.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/utils"}},{"name":"equals","description":"Checks if this collection shares identical key-value pairings with another.\rThis is different to checking for equality using equal-signs, because\rthe collections may be different objects, but contain the same data.","params":[{"name":"collection","description":"Collection to compare with","type":[[["Collection"]]]}],"returns":{"types":[[["boolean"]]],"description":"Whether the collections have identical contents"},"meta":{"line":407,"file":"collection.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/utils"}},{"name":"sort","description":"The sort() method sorts the elements of a collection in place and returns the collection.\rThe sort is not necessarily stable. The default sort order is according to string Unicode code points.","params":[{"name":"compareFunction","description":"Specifies a function that defines the sort order.\rif omitted, the collection is sorted according to each character's Unicode code point value,\raccording to the string conversion of each element.","optional":true,"type":[[["function"]]]}],"returns":[[["Collection"]]],"meta":{"line":425,"file":"collection.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/utils"}}],"meta":{"line":6,"file":"collection.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/utils"}}],"interfaces":[],"typedefs":[{"name":"ClientOptions","description":"Options for a client.","type":[[["Object"]]],"props":[{"name":"apiRequestMethod","description":"One of `sequential` or `burst`. The sequential handler executes\rall requests in the order they are triggered, whereas the burst handler runs multiple in parallel, and doesn't\rprovide the guarantee of any particular order. Burst mode is more likely to hit a 429 ratelimit error by its nature,\rand is therefore slightly riskier to use.","optional":true,"default":"'sequential'","type":[[["String"]]]},{"name":"messageCacheMaxSize","description":"Maximum number of messages to cache per channel\r(-1 or Infinity for unlimited - don't do this without message sweeping, otherwise memory usage will climb\rindefinitely)","optional":true,"default":200,"type":[[["Number"]]]},{"name":"messageCacheLifetime","description":"How long a message should stay in the cache until it is considered\rsweepable (in seconds, 0 for forever)","optional":true,"default":0,"type":[[["Number"]]]},{"name":"messageSweepInterval","description":"How frequently to remove messages from the cache that are older than\rthe message cache lifetime (in seconds, 0 for never)","optional":true,"default":0,"type":[[["Number"]]]},{"name":"fetchAllMembers","description":"Whether to cache all guild members and users upon startup, as well as\rupon joining a guild (should be avoided whenever possible)","optional":true,"default":false,"type":[[["Boolean"]]]},{"name":"sync","description":"Whether to periodically sync guilds (for user accounts)","optional":true,"default":false,"type":[[["Boolean"]]]},{"name":"sleeptWsBridgeTimeout","description":"Maximum time permitted between SLEEPT responses and their\rcorresponding websocket events","optional":true,"default":5000,"type":[[["Number"]]]},{"name":"sleeptTimeOffset","description":"Extra time in millseconds to wait before continuing to make SLEEPT\rrequests (higher values will reduce rate-limiting errors on bad connections)","optional":true,"default":500,"type":[[["Number"]]]},{"name":"retryLimit","description":"How many times to retry on 5XX errors\r(Infinity for indefinite amount of retries)","optional":true,"default":"Infinity","type":[[["Number"]]]},{"name":"disabledEvents","description":"An array of disabled websocket events. Events in this array will not be\rprocessed, potentially resulting in performance improvements for larger bots. Only disable events you are\r100% certain you don't need, as many are important, but not obviously so. The safest one to disable with the\rmost impact is typically `TYPING_START`.","optional":true,"type":[[["Array","<"],["WSEventType",">"]]]},{"name":"ws","description":"Options for the WebSocket","optional":true,"type":[[["WebsocketOptions"]]]},{"name":"http","description":"HTTP options","optional":true,"type":[[["HTTPOptions"]]]},{"name":"autoLogEnd","description":"autoLogEnd option","optional":true,"default":true,"type":[[["Boolean"]]]},{"name":"channels","description":"Channels bot will listen","optional":true,"type":[[["Array","<"],["String",">"]]]},{"name":"connectedChannels","description":"Channels bot is connected","optional":true,"type":[[["Array","<"],["String",">"]]]},{"name":"debug","description":"Starts the bot in debug mode if activated","optional":true,"default":false,"type":[[["Boolean"]]]}],"meta":{"line":4,"file":"Constants.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/utils"}},{"name":"WebsocketOptions","description":"WebSocket options (these are left as snake_case to match the API)","type":[[["Object"]]],"props":[{"name":"large_threshold","description":"Number of members in a guild to be considered large","optional":true,"default":250,"type":[[["Number"]]]},{"name":"compress","description":"Whether to compress data sent on the connection\r(defaults to `false` for browsers)","optional":true,"default":true,"type":[[["Boolean"]]]}],"meta":{"line":54,"file":"Constants.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/utils"}},{"name":"HTTPOptions","description":"HTTP options","type":[[["Object"]]],"props":[{"name":"version","description":"API version to use","optional":true,"default":7,"type":[[["Number"]]]},{"name":"host","description":"Base url of the IRC","optional":true,"default":"'tmi.twitch.tv'","type":[[["String"]]]},{"name":"api","description":"Base url of the API","optional":true,"default":"'tmi.twitch.tv'","type":[[["String"]]]},{"name":"headers","description":"Default http request options","optional":true,"type":[[["Object"]]]}],"meta":{"line":74,"file":"Constants.js","path":"../../../Documents/dados/twitchapis/TwitchJS/src/utils"}}],"externals":[]}
